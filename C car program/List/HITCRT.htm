<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\List\HITCRT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\List\HITCRT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 791]: Last Updated: Thu Jun 21 20:02:42 2012
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DispatchTask &rArr; DoubleVerticalOMNILocateEx1 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ab]">OS_CPU_SR_Save</a>
 <LI><a href="#[ac]">OS_CPU_SR_Restore</a>
 <LI><a href="#[128]">OSStartHighRdy</a>
 <LI><a href="#[132]">OSCtxSw</a>
 <LI><a href="#[126]">OSIntCtxSw</a>
 <LI><a href="#[e]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">ActionMotorCtrlTask</a> from robotctrl.o(i.ActionMotorCtrlTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[66]">BaseCtrlTask</a> from robotctrl.o(i.BaseCtrlTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">CanTask</a> from robotctrl.o(i.CanTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[5e]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">DetectTask</a> from robotctrl.o(i.DetectTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[6b]">DispatchTask</a> from robotctrl.o(i.DispatchTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">InitTask</a> from robotctrl.o(i.InitTask) referenced from robotctrl.o(i.main)
 <LI><a href="#[68]">LcdDispTask</a> from robotctrl.o(i.LcdDispTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">NavTask</a> from robotctrl.o(i.NavTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[65]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[6e]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">ReadKeyTask</a> from robotctrl.o(i.ReadKeyTask) referenced from robotctrl.o(i.InitTask)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[12]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[0]">TurnAction_M1</a> from robotctrl.o(i.TurnAction_M1) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[1]">TurnAction_M2</a> from robotctrl.o(i.TurnAction_M2) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[2]">TurnAction_M3</a> from robotctrl.o(i.TurnAction_M3) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[3]">TurnBASE_WA</a> from robotctrl.o(i.TurnBASE_WA) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[4]">TurnBASE_WB</a> from robotctrl.o(i.TurnBASE_WB) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[5]">TurnBASE_WC</a> from robotctrl.o(i.TurnBASE_WC) referenced 2 times from robotctrl.o(.data)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[6f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[62]">main</a> from robotctrl.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[71]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[160]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[161]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ac]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[128]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[132]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[126]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoTxBuf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoRxBuf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutDatatoRxBuf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSeries
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesRobotV
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_d2uiz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dfixui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSeries
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[167]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[168]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[169]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[74]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[153]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[16b]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[72]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[16c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>ARM_LED_Configuration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.ARM_LED_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ARM_LED_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[67]"></a>ActionMotorCtrlTask</STRONG> (Thumb, 676 bytes, Stack size 0 bytes, robotctrl.o(i.ActionMotorCtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ActionMotorCtrlTask &rArr; DiffAutoPotLoopCtrl &rArr; DiffAutoVeltDis &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[98]"></a>AutoBaseVeltAllocate</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, privatefunction.o(i.AutoBaseVeltAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AutoBaseVeltAllocate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[66]"></a>BaseCtrlTask</STRONG> (Thumb, 478 bytes, Stack size 0 bytes, robotctrl.o(i.BaseCtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BaseCtrlTask &rArr; VeltLoopCtrl &rArr; Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[9e]"></a>BlueFlashPage1</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage1 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a4]"></a>BlueFlashPage2</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage2 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a5]"></a>BlueFlashPage3</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage3 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a6]"></a>BlueFlashPage4</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage4 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a7]"></a>BlueFlashPage5</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage5))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage5 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a8]"></a>BlueFlashPage6</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.BlueFlashPage6))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueFlashPage6 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>CAN1BeginSend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.CAN1BeginSend))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[b0]"></a>CAN1GetTxBufDat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(i.CAN1GetTxBufDat))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>CAN1IsDataInTxBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can.o(i.CAN1IsDataInTxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[a9]"></a>CAN1PutDatatoRxBuf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, can.o(i.CAN1PutDatatoRxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1PutDatatoRxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>CAN1StopSend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.CAN1StopSend))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN1PutDatatoRxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutDatatoRxBuf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CAN1_TX_IRQHandler &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1StopSend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1IsDataInTxBuf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetTxBufDat
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>CAN2BeginSend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.CAN2BeginSend))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCmdMsgByCan2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCfgCmdMsgByCan2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAirMsgByCan2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[d0]"></a>CAN2GetRxBufDat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(i.CAN2GetRxBufDat))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[b6]"></a>CAN2GetTxBufDat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(i.CAN2GetTxBufDat))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>CAN2IsDataInRxBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can.o(i.CAN2IsDataInRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[b5]"></a>CAN2IsDataInTxBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can.o(i.CAN2IsDataInTxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[b3]"></a>CAN2PutDatatoRxBuf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, can.o(i.CAN2PutDatatoRxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN2PutDatatoRxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>CAN2PutDatatoTxBuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, can.o(i.CAN2PutDatatoTxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN2PutDatatoTxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCmdMsgByCan2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCfgCmdMsgByCan2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAirMsgByCan2
</UL>

<P><STRONG><a name="[b7]"></a>CAN2StopSend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(i.CAN2StopSend))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN2PutDatatoRxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoRxBuf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CAN2_TX_IRQHandler &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2StopSend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2IsDataInTxBuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2GetTxBufDat
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CAN_Configuration</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, can.o(i.CAN_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[bb]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>CAN_FilterInit</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[be]"></a>CAN_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[bc]"></a>CAN_Init</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[ad]"></a>CAN_Receive</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>CAN_Transmit</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>CalAngle</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, hitcrt_algorithm.o(i.CalAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CalAngle &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[c4]"></a>CalNormalProjection</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, hitcrt_algorithm.o(i.CalNormalProjection))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalNormalProjection &rArr; Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[c6]"></a>CalPIDIS</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, hitcrt_algorithm.o(i.CalPIDIS))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalPIDIS &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
</UL>

<P><STRONG><a name="[c8]"></a>CalPage</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, robotctrl.o(i.CalPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[c9]"></a>CalPosPID</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, motorctrl.o(i.CalPosPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalPosPID &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[cb]"></a>CalRadialProjection</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, hitcrt_algorithm.o(i.CalRadialProjection))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalRadialProjection &rArr; Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[92]"></a>CalVelt</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, motorctrl.o(i.CalVelt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalVelt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[6d]"></a>CanTask</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, robotctrl.o(i.CanTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = CanTask &rArr; Define_Comm_Objs &rArr; CreateCommObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2IsDataInTxBuf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2IsDataInRxBuf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2GetRxBufDat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2BeginSend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1IsDataInTxBuf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1BeginSend
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSwitchValue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRadarValue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLineValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCmdMsgByCan2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Define_Comm_Objs
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUCHAR8Min
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindUCHAR8Max
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[d8]"></a>ChipHalInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal.o(i.ChipHalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ChipHalInit &rArr; FSMC_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_LED_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>ChipOutHalInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i.ChipOutHalInit))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>Clip</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hitcrt_algorithm.o(i.Clip))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
</UL>

<P><STRONG><a name="[ca]"></a>ClipFloat</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hitcrt_algorithm.o(i.ClipFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClipFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
</UL>

<P><STRONG><a name="[e1]"></a>CoderPage1</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, robotctrl.o(i.CoderPage1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoderPage1 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[e2]"></a>CoderPage2</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, robotctrl.o(i.CoderPage2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoderPage2 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[e3]"></a>CommuInterrupt_Irq</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, robotctrl.o(i.CommuInterrupt_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommuInterrupt_Irq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>ConvertAngle</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, hitcrt_algorithm.o(i.ConvertAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConvertAngle &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[11b]"></a>ConvertDeg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hitcrt_algorithm.o(i.ConvertDeg))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[93]"></a>CopyFloatSlowly</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, motorctrl.o(i.CopyFloatSlowly))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CopyFloatSlowly &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[11c]"></a>CopyIntSlowly</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, motorctrl.o(i.CopyIntSlowly))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CopyIntSlowly
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[f8]"></a>CopyIntSlowlyEx</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, motorctrl.o(i.CopyIntSlowlyEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyIntSlowlyEx
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[e6]"></a>CreateCommObj</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, robotctrl.o(i.CreateCommObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CreateCommObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Define_Comm_Objs
</UL>

<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>Define_Comm_Objs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, robotctrl.o(i.Define_Comm_Objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Define_Comm_Objs &rArr; CreateCommObj &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCommObj
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[e8]"></a>DesRobotV</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, privatefunction.o(i.DesRobotV))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DesRobotV &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[6c]"></a>DetectTask</STRONG> (Thumb, 4562 bytes, Stack size 0 bytes, robotctrl.o(i.DetectTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DetectTask &rArr; InitMode &rArr; SetPathEndPosEx &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAirMsgByCan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[90]"></a>DiffAutoPotLoopCtrl</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, motorctrl.o(i.DiffAutoPotLoopCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DiffAutoPotLoopCtrl &rArr; DiffAutoVeltDis &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[ef]"></a>DiffAutoVeltDis</STRONG> (Thumb, 2914 bytes, Stack size 96 bytes, motorctrl.o(i.DiffAutoVeltDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DiffAutoVeltDis &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
</UL>

<P><STRONG><a name="[6b]"></a>DispatchTask</STRONG> (Thumb, 22880 bytes, Stack size 64 bytes, robotctrl.o(i.DispatchTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = DispatchTask &rArr; DoubleVerticalOMNILocateEx1 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrComm1IsDataInRxBuf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrComm1GetRxBufDat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCmdMsgByCan2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAirMsgByCan2
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyIntSlowlyEx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyFloatSlowly
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[f0]"></a>DoubleVerticalOMNILocateEx1</STRONG> (Thumb, 660 bytes, Stack size 120 bytes, location.o(i.DoubleVerticalOMNILocateEx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DoubleVerticalOMNILocateEx1 &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
</UL>

<P><STRONG><a name="[fa]"></a>FLASH_EraseSector</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_GetStatus</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13f]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
</UL>

<P><STRONG><a name="[fc]"></a>FLASH_ProgramWord</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
</UL>

<P><STRONG><a name="[13d]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
</UL>

<P><STRONG><a name="[fb]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[dd]"></a>FSMC_Configuration</STRONG> (Thumb, 574 bytes, Stack size 104 bytes, fsmc.o(i.FSMC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FSMC_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[ff]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
</UL>

<P><STRONG><a name="[fe]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
</UL>

<P><STRONG><a name="[d3]"></a>FindUCHAR8Max</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, privatefunction.o(i.FindUCHAR8Max))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindUCHAR8Max
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[d4]"></a>FindUCHAR8Min</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, privatefunction.o(i.FindUCHAR8Min))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindUCHAR8Min
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[db]"></a>GPIO_Configuration</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, gpio.o(i.GPIO_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_Init</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_LED_Configuration
</UL>

<P><STRONG><a name="[b9]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[eb]"></a>GetCurTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, privatefunction.o(i.GetCurTime))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
</UL>

<P><STRONG><a name="[101]"></a>GetOneInt32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flashsave.o(i.GetOneInt32))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
</UL>

<P><STRONG><a name="[a2]"></a>GetOneShort16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flashsave.o(i.GetOneShort16))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>HorMotorBluePage</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.HorMotorBluePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HorMotorBluePage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneInt32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[102]"></a>HorMotorRedPage</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, robotctrl.o(i.HorMotorRedPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HorMotorRedPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[104]"></a>InitLcd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hitcrt_api.o(i.InitLcd))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[ec]"></a>InitMode</STRONG> (Thumb, 1608 bytes, Stack size 8 bytes, robotctrl.o(i.InitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitMode &rArr; SetPathEndPosEx &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
</UL>

<P><STRONG><a name="[70]"></a>InitTask</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, robotctrl.o(i.InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = InitTask &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.main)
</UL>
<P><STRONG><a name="[f1]"></a>IrComm1GetRxBufDat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ircomm.o(i.IrComm1GetRxBufDat))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[f2]"></a>IrComm1IsDataInRxBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ircomm.o(i.IrComm1IsDataInRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[14d]"></a>IrComm1PutDataToRxBuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ircomm.o(i.IrComm1PutDataToRxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>LcdClear</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, robotctrl.o(i.LcdClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdClear
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPwmPage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCoderPage3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSelectPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineFilterPage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorRedPage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>

<P><STRONG><a name="[68]"></a>LcdDispTask</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, robotctrl.o(i.LcdDispTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LcdDispTask &rArr; OtherFlashPage &rArr; ReadRobotFpVy &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLinePage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPwmPage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCoderPage3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSelectPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineFilterPage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorRedPage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[10d]"></a>LineFilterPage</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, robotctrl.o(i.LineFilterPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LineFilterPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[109]"></a>LowSpeedPage</STRONG> (Thumb, 928 bytes, Stack size 16 bytes, robotctrl.o(i.LowSpeedPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LowSpeedPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[116]"></a>ManualBaseVeltAllocate</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, privatefunction.o(i.ManualBaseVeltAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ManualBaseVeltAllocate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[108]"></a>ManualPage</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, robotctrl.o(i.ManualPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ManualPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>ModeSelectPage</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, robotctrl.o(i.ModeSelectPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ModeSelectPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[10a]"></a>MotorCoderPage3</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, robotctrl.o(i.MotorCoderPage3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotorCoderPage3 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[10b]"></a>MotorPwmPage</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, robotctrl.o(i.MotorPwmPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotorPwmPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[10c]"></a>MotorVeltDesPage</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, robotctrl.o(i.MotorVeltDesPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotorVeltDesPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>NVIC_Configuration</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, nvic.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[118]"></a>NVIC_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[117]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[119]"></a>NavLineEx1</STRONG> (Thumb, 1048 bytes, Stack size 112 bytes, navigation.o(i.NavLineEx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = NavLineEx1 &rArr; AutoBaseVeltAllocate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSeries
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertDeg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAngle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
</UL>

<P><STRONG><a name="[6a]"></a>NavTask</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, robotctrl.o(i.NavTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = NavTask &rArr; NavLineEx1 &rArr; AutoBaseVeltAllocate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyIntSlowly
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesRobotV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[11d]"></a>OSInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[124]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ae]"></a>OSIntExit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[103]"></a>OSTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[134]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[135]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[12c]"></a>OSTaskNameSet</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[129]"></a>OSTaskStkInit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[65]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[12f]"></a>OSTimeTick</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[130]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[131]"></a>OS_MemClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[12b]"></a>OS_Sched</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[12e]"></a>OS_StrCopy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[12d]"></a>OS_StrLen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>

<P><STRONG><a name="[12a]"></a>OS_TCBInit</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[6e]"></a>OS_TaskIdle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[115]"></a>OtherFlashPage</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, robotctrl.o(i.OtherFlashPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = OtherFlashPage &rArr; ReadRobotFpVy &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[91]"></a>PotDoubleLoopCtrl</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, motorctrl.o(i.PotDoubleLoopCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PotDoubleLoopCtrl &rArr; VeltLoopCtrl &rArr; Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalVelt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPosPID
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[a1]"></a>PrintChar</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, hitcrt_api.o(i.PrintChar))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLinePage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPwmPage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCoderPage3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSelectPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorRedPage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>

<P><STRONG><a name="[a3]"></a>PrintInt</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, hitcrt_api.o(i.PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLinePage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPwmPage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCoderPage3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSelectPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineFilterPage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorRedPage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>

<P><STRONG><a name="[a0]"></a>PutCur</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hitcrt_api.o(i.PutCur))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestLinePage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage6
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage5
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RedFlashPage1
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVeltDesPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPwmPage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorCoderPage3
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSelectPage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualPage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowSpeedPage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineFilterPage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorRedPage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorMotorBluePage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoderPage1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage6
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage5
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage3
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueFlashPage1
</UL>

<P><STRONG><a name="[137]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[138]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ba]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[bf]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[147]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[d9]"></a>RCC_Configuration</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rcc.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[14f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14e]"></a>RcvMEMSGryo</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, privatefunction.o(i.RcvMEMSGryo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RcvMEMSGryo
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>ReadKeyTask</STRONG> (Thumb, 6722 bytes, Stack size 0 bytes, robotctrl.o(i.ReadKeyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ReadKeyTask &rArr; InitMode &rArr; SetPathEndPosEx &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneWord32
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAllWord32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCmdMsgByCan2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLineCfgCmdMsgByCan2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAirMsgByCan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPathEndPosEx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMEMSGryo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMEMSGryo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(i.InitTask)
</UL>
<P><STRONG><a name="[f6]"></a>ReadRobotFpVy</STRONG> (Thumb, 320 bytes, Stack size 104 bytes, privatefunction.o(i.ReadRobotFpVy))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ReadRobotFpVy &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherFlashPage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[10f]"></a>RedFlashPage1</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage1 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[111]"></a>RedFlashPage2</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage2 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[113]"></a>RedFlashPage3</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage3 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[110]"></a>RedFlashPage4</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage4 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[112]"></a>RedFlashPage5</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage5))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage5 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[114]"></a>RedFlashPage6</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, robotctrl.o(i.RedFlashPage6))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RedFlashPage6 &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOneShort16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[f9]"></a>RetVisionLineValue</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, privatefunction.o(i.RetVisionLineValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RetVisionLineValue &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestVisionPage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
</UL>

<P><STRONG><a name="[c5]"></a>Round</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hitcrt_algorithm.o(i.Round))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VeltLoopCtrl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SaveAllWord32</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, flashsave.o(i.SaveAllWord32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SaveAllWord32 &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
</UL>

<P><STRONG><a name="[13b]"></a>SaveOneWord32</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, flashsave.o(i.SaveOneWord32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SaveOneWord32 &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
</UL>

<P><STRONG><a name="[ea]"></a>SendAirMsgByCan2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, can_api.o(i.SendAirMsgByCan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendAirMsgByCan2 &rArr; CAN2PutDatatoTxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoTxBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2BeginSend
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
</UL>

<P><STRONG><a name="[13c]"></a>SendLineCfgCmdMsgByCan2</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, can_api.o(i.SendLineCfgCmdMsgByCan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendLineCfgCmdMsgByCan2 &rArr; CAN2PutDatatoTxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoTxBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2BeginSend
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
</UL>

<P><STRONG><a name="[cc]"></a>SendLineCmdMsgByCan2</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can_api.o(i.SendLineCmdMsgByCan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SendLineCmdMsgByCan2 &rArr; CAN2PutDatatoTxBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2PutDatatoTxBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2BeginSend
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[106]"></a>SensorPage</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, robotctrl.o(i.SensorPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SensorPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[e9]"></a>SetPathEndPosEx</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, motorctrl.o(i.SetPathEndPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPathEndPosEx &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectTask
</UL>

<P><STRONG><a name="[13a]"></a>StartMEMSGryo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, privatefunction.o(i.StartMEMSGryo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartMEMSGryo
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
</UL>

<P><STRONG><a name="[139]"></a>StopMEMSGryo</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, privatefunction.o(i.StopMEMSGryo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopMEMSGryo
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>TIM_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[dc]"></a>TIM_Configuration</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tim.o(i.TIM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[145]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectInputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[142]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectMasterSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[143]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[144]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SelectSlaveMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[141]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[107]"></a>TestLinePage</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, robotctrl.o(i.TestLinePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TestLinePage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[10e]"></a>TestVisionPage</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, robotctrl.o(i.TestVisionPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TestVisionPage &rArr; PrintInt &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutCur
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintChar
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClear
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RetVisionLineValue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDispTask
</UL>

<P><STRONG><a name="[0]"></a>TurnAction_M1</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, robotctrl.o(i.TurnAction_M1))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>TurnAction_M2</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, robotctrl.o(i.TurnAction_M2))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>TurnAction_M3</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, robotctrl.o(i.TurnAction_M3))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>TurnBASE_WA</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, robotctrl.o(i.TurnBASE_WA))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>TurnBASE_WB</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, robotctrl.o(i.TurnBASE_WB))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>TurnBASE_WC</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, robotctrl.o(i.TurnBASE_WC))
<BR>[Address Reference Count : 1]<UL><LI> robotctrl.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>UART1_Configuration</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, uart.o(i.UART1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[df]"></a>UART2_Configuration</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, uart.o(i.UART2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART2_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[e0]"></a>UART6_Configuration</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, uart.o(i.UART6_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART6_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuInterrupt_Irq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrComm1PutDataToRxBuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART6_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvMEMSGryo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>USART_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMEMSGryo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMEMSGryo
</UL>

<P><STRONG><a name="[14b]"></a>USART_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[f4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMEMSGryo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMEMSGryo
</UL>

<P><STRONG><a name="[14c]"></a>USART_GetITStatus</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>USART_ITConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[149]"></a>USART_Init</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[148]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_OverSampling8Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Configuration
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[e4]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuInterrupt_Irq
</UL>

<P><STRONG><a name="[f3]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKeyTask
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMEMSGryo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMEMSGryo
</UL>

<P><STRONG><a name="[d2]"></a>UpdateLineValue</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, can_api.o(i.UpdateLineValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateLineValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[d5]"></a>UpdateRadarValue</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, can_api.o(i.UpdateRadarValue))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[d1]"></a>UpdateSwitchValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_api.o(i.UpdateSwitchValue))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTask
</UL>

<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>VeltLoopCtrl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, motorctrl.o(i.VeltLoopCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VeltLoopCtrl &rArr; Round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClipFloat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPIDIS
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PotDoubleLoopCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoPotLoopCtrl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseCtrlTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionMotorCtrlTask
</UL>

<P><STRONG><a name="[150]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16f]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[136]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintInt
</UL>

<P><STRONG><a name="[170]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[171]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[157]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[152]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[154]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[155]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[156]"></a>__kernel_sin</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[158]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[172]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[173]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[15d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[c1]"></a>atan</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalAngle
</UL>

<P><STRONG><a name="[99]"></a>cos</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, robotctrl.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = main &rArr; ChipHalInit &rArr; FSMC_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipOutHalInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[e7]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCommObj
</UL>

<P><STRONG><a name="[9a]"></a>sin</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBaseVeltAllocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleVerticalOMNILocateEx1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispatchTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRobotFpVy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualBaseVeltAllocate
</UL>

<P><STRONG><a name="[9d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPathDecisionOMNI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiffAutoVeltDis
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalRadialProjection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalNormalProjection
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>AutoPathDecisionOMNI</STRONG> (Thumb, 852 bytes, Stack size 80 bytes, navigation.o(i.AutoPathDecisionOMNI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AutoPathDecisionOMNI &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[d7]"></a>CheckSeries</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, navigation.o(i.CheckSeries))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckSeries &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavLineEx1
</UL>

<P><STRONG><a name="[140]"></a>SetSysClock</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[122]"></a>OS_InitEventList</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[11f]"></a>OS_InitMisc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[120]"></a>OS_InitRdyList</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[121]"></a>OS_InitTCBList</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[123]"></a>OS_InitTaskIdle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[125]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[159]"></a>_fp_digits</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[151]"></a>_printf_core</STRONG> (Thumb, 1782 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[15b]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15a]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
