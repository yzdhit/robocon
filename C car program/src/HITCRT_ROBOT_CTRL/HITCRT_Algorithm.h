#ifndef	__HITCRT_ALGORITHM_H
#define __HITCRT_ALGORITHM_H

#include "HITCRT_Types.h"

#define SQUARE(x)    ((x) * (x))

/*******************************************************************
函数名称：Clip()
函数功能：削波函数，去除超出最大值与最小值之间的值，代之以最大或最小值
输入：    siValue:实际值
			siMin:下限值
			siMax:上限值
输出：   削波后的值
备注：
********************************************************************/
extern SINT32 Clip(SINT32 siValue, SINT32 siMin, SINT32 siMax);
extern FP32	 ClipFloat(FP32 fpValue, FP32 fpMin, FP32 fpMax);

/*******************************************************************
函数名称：Round()
函数功能：将浮点数四舍五入，返回32位整型数
输入：    fpValue
输出：    四舍五入后返回的整型数
备注：
********************************************************************/
extern SINT32 Round(FP32 fpValue);

/*******************************************************************
函数名称：CalPIDIS()
函数功能：计算PID量
          增量型PID算法的计算公式：detU(k)=U(k)-U(k-1)=Kp(detE(k)+IE(k)+D*det(E(k))+det(E(k)))
          积分分离式PID，可防止过大超调量
输入：    pstPid:需要做PID运算的速度PID结构体指针
输出：    无
备注：
********************************************************************/
extern void CalPIDIS(volatile ST_PID *pstPid);

/*******************************************************************
函数名称：CalPIDWTCOL() 
函数功能：计算PID量
          增量型PID算法的计算公式：detU(k)=U(k)-U(k-1)=Kp(detE(k)+IE(k)+fpD*det(E(k))+det(E(k)))
          遇限削弱式PID，可防止PID运算结果长期饱和
输入：    pstPid:需要做PID运算的速度PID结构体指针
输出：    无
备注：
********************************************************************/
extern void CalPIDWTCOL(volatile ST_PID *pstPid);    //遇限削弱式PID算法（Weaken The Case Of Limited）

/*******************************************************************
函数名称：CalPIDWTCOLIS() 
函数功能：计算PID量
          增量型PID算法的计算公式：detU(k)=U(k)-U(k-1)=Kp(detE(k)+IE(k)+fpD*det(E(k))+det(E(k)))
          积分分离+遇限削弱式PID结合二者优点
输入：    pstPid:需要做PID运算的速度PID结构体指针
输出：    无
备注：
********************************************************************/
extern void CalPIDWTCOLIS(volatile ST_PID *pstPid);  

/*******************************************************************
函数名称：NoCalPIDWTCOL()  
函数功能：计算PID量
          增量型PID算法的计算公式：detU(k)=U(k)-U(k-1)=Kp(detE(k)+IE(k)+fpD*det(E(k))+det(E(k)))
          无遇限削弱式PID
输入：    pstPid:需要做PID运算的速度PID结构体指针
输出：    无
备注：
********************************************************************/
extern void NoCalPIDWTCOL(volatile ST_PID *pstPid);    

/*******************************************************************
函数名称：CalPIDUni()  
函数功能：计算PID量
          增量型PID算法的计算公式：detU(k)=U(k)-U(k-1)=Kp(detE(k)+IE(k)+fpD*det(E(k))+det(E(k)))
          PID归一化参数整定公式
输入：    pstPid:需要做PID运算的速度PID结构体指针
输出：    无
备注：	  导航用，只需整定参数Kp，系数数的确定参看相关书籍
********************************************************************/
extern void CalPIDUni(volatile ST_PID *pstPid);    

/*******************************************************************
函数名称：CalNormalProjection()  
函数功能：计算一向量在基准向量法向方向投影
输入：    stAim:目标向量，即需要投影的向量
		  stBase:基准向量
输出：    目标向量在基准向量法向方向上的投影
备注：    基准向量的法向向量为基准向量顺时针旋转90°得到
		  当目标点在基准直线左侧时（以基准向量方向为正方向），投影值为正，反之为负
********************************************************************/
extern SSHORT16 CalNormalProjection(ST_VECTOR stAim,ST_VECTOR stBase);

/*******************************************************************
函数名称：CalRadialProjection()  
函数功能：计算一向量在基准向量方向投影
输入：    stAim:目标向量，即需要投影的向量
		  stBase:基准向量
输出：    目标向量在基准向量上的投影
备注：    当目标点在基准直线之间时，投影值为正，反之为负
********************************************************************/
extern SSHORT16 CalRadialProjection(ST_VECTOR stAim, ST_VECTOR stBase);

/*******************************************************************
函数名称：CalAngle()  
函数功能：计算一向量与ssPosX轴正半轴夹角
输入：    stAim:目标向量
输出：    目标向量与ssPosY轴正半轴夹角(RADIAN)
备注：    逆时针为正，顺时针为负，计算夹角范围为：[-PI,PI)
********************************************************************/
extern FP32 CalAngle(ST_VECTOR stAim);

/*******************************************************************
函数名称：ConvertAngle()  
函数功能：将角度转换为全局坐标系的航向角范围[-PI,PI)
输入：    ang：目标角度(RADIAN)
输出：    转换后的角度(RADIAN)
备注：    逆时针为正，顺时针为负，不适合对角度值较大的值做转换
********************************************************************/
extern FP32 ConvertAngle(FP32 fpAngA);
/*******************************************************************
函数名称：ConvertAngle_2()  
函数功能：将[-PI,PI]角度转换为全局坐标系与X轴正向的航向角范围[0,2PI)
输入：    ang：目标角度(RADIAN)
输出：    转换后的角度(RADIAN)
备注：    逆时针为正
********************************************************************/
extern FP32 ConverAngle_2(FP32 fpAngA);


/*******************************************************************
函数名称：ConvertAngle_3()  
函数功能：将角度转换为全局坐标系与X轴正向的航向角范围[0,2PI)
输入：    ang：目标角度(RADIAN)
输出：    转换后的角度(RADIAN)
备注：    逆时针为正
********************************************************************/
extern FP32 ConverAngle_3(FP32 fpAngA);


/*******************************************************************
函数名称：ConvertDeg()  
函数功能：将角度转换为全局坐标系的航向角范围[-1800,1800)(单位：0.1°)
输入：    ang：目标角度(单位：0.1°)
输出：    转换后的角度(单位：0.1°)
备注：    逆时针为正，顺时针为负，不适合对角度值较大的值做转换
********************************************************************/
extern SSHORT16 ConvertDeg(SSHORT16 fpDegA);

/*******************************************************************
函数名称：CalAverage()  
函数功能：求一数组的平均值
输入：    pssNum：数组首地址
		  ssLenNum：数组的长度
输出：    数组的平均值
备注：    
********************************************************************/
extern FP32 CalAverage(SSHORT16 *pssNum, SSHORT16 ssLenNum);

#endif


