#ifndef NAVIGATION_H
#define NAVIGATION_H
#include "math.h"




/***********************************************************************************************************************
函数名: void DistributeSpeed(ST_POSITION *pstDPos,ST_SPEED *pstTargetSpeed,FP32 fpAngle)
函数功能: 根据车子目标速度和目标转速，为每个轮子分配速度
输入: *pstDPos 指向车子目标速度结构体的指针 (这里使用的是位置的结构体，位置的微分就是速度）;
      *pstTargetSpeed 指向车轮目标速度的指针;
      fpAngle 车子航向角;
输出: 无
备注: 
************************************************************************************************************************/
void NavLine(ST_OMNI_MOBILE_ROBOT *pstR);
/****************************************************************************************************
函数功能：圆弧PID导航，使机器人一定的航向角或与圆弧轨迹切向保持一定夹角沿圆弧轨迹运动
入口参数：pos：机器人当前位置
		  pid_cir：圆弧导航PID参数数据结构体
		  tpath：当前路径
		  tspeed：要分配的暂时目标速度
出口参数：1：表示已经行走至此路段终点
		  0：表示未行走至此路段终点
调试说明：采用向量计算距离，直接考虑正负号问题，减少三角函数的使用，从而提高了执行效率
		  385us左右，一条反三角函数或开方函数占用时间为30-40us,故一定要慎重使用
****************************************************************************************************/
void NavCircle(ST_OMNI_MOBILE_ROBOT *pstR);
/***********************************************************************************************************************
函数名: void ManualCtrl(ST_OMNI_MOBILE_ROBOT *pstR, ST_ROBOT_VELT *pstV)
函数功能: 手动控制机器人根据车子目标速度和目标转速，为每个轮子分配速度
输入: ST_OMNI_MOBILE_ROBOT *pstR, 机器人个方向速度ST_ROBOT_VELT *pstV
输出: 无
备注: 
************************************************************************************************************************/
extern void ManualCtrl(ST_OMNI_MOBILE_ROBOT *pstR, ST_ROBOT_VELT *pstV);

extern void NavLineEx1(ST_OMNI_MOBILE_ROBOT *pstR);


#endif
